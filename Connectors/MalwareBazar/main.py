from pycti import OpenCTIConnectorHelper, get_config_variable, SimpleObservable, OpenCTIStix2Utils
import time
from stix2 import Identity, Malware, Indicator, Relationship, TLP_WHITE, Bundle, ExternalReference, Report, Note
import os
import yaml
from datetime import datetime
import requests
import json

class MalwareBazarConnector:
    def __init__(self):
        # Initialization procedures
        config_file_path = os.path.dirname(os.path.abspath(__file__)) + "/config.yml"
        config = (
            yaml.load(open(config_file_path), Loader=yaml.FullLoader)
            if os.path.isfile(config_file_path)
            else {}
        )
        self.helper = OpenCTIConnectorHelper(config)
        self.api_key = get_config_variable(
            "MALWAREBAZAR_API_KEY", ["malwarebazar", "api_key"], config
        )
        self.whitelist_label = self.helper.api.label.create(
            value="whitelist", color="#4caf50"
        )
        self.headers = {
            "Accept": "application/json",
            "Content-Type": "application/x-www-form-urlencoded",
            'API-KEY': self.api_key
            }
        self.url = "https://mb-api.abuse.ch/api/v1/"
        self.mw = self.helper.api.identity.list(filters=[{"key":"name", "value":"MalwareBazaar"}])
        mwid = None
        if(self.mw): mwid = self.mw[0]["standard_id"]
        else: mwid = OpenCTIStix2Utils.generate_random_stix_id("identity")
        self.mw = Identity(
            id=mwid,
            name="MalwareBazaar",
            identity_class="organization",
            external_references=[self.ext_mw]
        )

        self.ext_mw = ExternalReference(
            source_name="MalwareBazaar",
            description="MalwareBazaar is a project from abuse.ch with the goal of sharing malware samples with the infosec community, AV vendors and threat intelligence providers.",
            url="https://bazaar.abuse.ch/"
        )
        
        

    def _create_yara(self, yara):
        return self.helper.api.indicator.create(
            name=yara.get("rule_name", "No rulename provided"),
            description=json.dumps(
                {
                    "description": yara.get("description", "No description provided"),
                    "author": yara.get("author", "No author provided"),
                    "source": yara.get("reference", "No source provided")
                }
            ),
            pattern_type="yara",
            x_opencti_main_observable_type="StixFile",
            labels=["MalwareBazar"]
        )

    def _create_boundles(self, data):
        malware = Malware(
            id=OpenCTIStix2Utils.generate_random_stix_id("malware"),
            is_family=False,
            name=data["file_name"],
            labels=["malware"],
            first_seen=datetime.strptime(data["first_seen"], "%Y-%m-%d %H:%M:%S"),
            last_seen=datetime.strptime(data["last_seen"], "%Y-%m-%d %H:%M:%S"),
            object_marking_refs=[TLP_WHITE],
            external_references=[self.ext_mw]
        )
        report = Report(
            id=OpenCTIStix2Utils.generate_random_stix_id("report"),
            report_types=["malware"],
            name=data["file_name"],
            published=datetime.strptime(data["first_seen"], "%Y-%m-%d %H:%M:%S"),
            labels=["malware"],
            object_refs=[malware.id],
            created_by_ref=self.mw.id,
            external_references=[self.ext_mw]
        )
        note = Note(
            id=OpenCTIStix2Utils.generate_random_stix_id("note"),
            content=data["file_name"],
            object_refs=[malware.id, report.id],
            labels=["malware"],
            external_references=[self.ext_mw]
        )
        indicator = Indicator(
            id=OpenCTIStix2Utils.generate_random_stix_id("indicator"),
            pattern="malware",
            patter_type="stix",
            created_by_ref=self.mw.id,
            name=data["file_name"],
            indicator_types=["compromised"],
            labels=["MalwareBazar"],
            object_marking_refs=[TLP_WHITE],
        )
        relrr = Relationship(
            id=OpenCTIStix2Utils.generate_random_stix_id("relationship"),
            relationship_type="indicates",
            source_ref=indicator.id,
            target_ref=malware.id,
            confidence=self.helper.connect_confidence_level,
            external_references=[self.ext_mw]
        )
        bundle = Bundle(
            objects=[
                self.mw,
                self.ext_mw,
                indicator,
                malware,
                report,
                note,
                relrr
            ],
            allow_custom=True,
            entities_types=self.helper.connect_scope
        ).serialize()
        self.helper.send_stix2_bundle(bundle)

    def _process_file(self, observable):
        if observable is None:
            return
        if(observable["entity_type"] in ["File"]):
            h = observable["observable_value"]
            ob_id = observable["id"]
            params = {"query": "get_info", "hash": h}	
            r = requests.post(self.url, headers=self.headers, data=params)
            sc = r.status_code
            if(sc == 200):
                data = r.json()
                if(data["query_status"] == "illegal_hash"):
                    self.helper.log_info("Not Found")
                elif(data["query_status"] == "ok"):
                    data = data["data"][0]
                    final_observable = self.helper.api.stix_cyber_observable.update_field(
                        id=ob_id,
                        name=data["file_name"],
                        size=int(data["file_size"]),
                        mime_type=data["file_type_mime"],
                        extensions=data["file_type"]
                    )
                if("yara_rules" in data):
                    self.helper.log_info("Yara rule added")
                    yaras = list(
                        filter(
                            None,
                            [
                                self._create_yara(yara)
                                for yara in data["yara_rules"]
                            ],
                        )
                    )

                    for yara in yaras:
                        self.helper.api.stix_core_relationship.create(
                            fromId=final_observable["id"],
                            toId=yara["id"],
                            relationship_type="related-to",
                        )
                self._create_boundles(data)

    def _process_message(self, data):
        entity_id = data["entity_id"]
        observable = self.helper.api.stix_cyber_observable.read(id=entity_id)
        # Extract TLP
        tlp = "TLP:WHITE"
        for marking_definition in observable["objectMarking"]:
            if marking_definition["definition_type"] == "TLP":
                tlp = marking_definition["definition"]
        if not OpenCTIConnectorHelper.check_max_tlp(tlp, self.max_tlp):
            raise ValueError(
                "Do not send any data, TLP of the observable is greater than MAX TLP"
            )
        return self._process_file(observable)



    # Start the main loop
    def start(self):
        self.helper.listen(self._process_message)

if __name__ == "__main__":
    try:
        malwarebazare_connector = MalwareBazarConnector()
        malwarebazare_connector.start()
    except Exception as e:
        print(e)
        time.sleep(10)
        exit(0)